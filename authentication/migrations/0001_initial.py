# Generated by Django 4.0.3 on 2022-03-24 12:25

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=75, verbose_name="Company Name")),
                (
                    "description",
                    models.TextField(null=True, verbose_name="Company Description"),
                ),
                (
                    "city",
                    models.CharField(max_length=75, null=True, verbose_name="City"),
                ),
                (
                    "street",
                    models.CharField(max_length=75, null=True, verbose_name="Street"),
                ),
                (
                    "zip_code",
                    models.CharField(max_length=75, null=True, verbose_name="Zip Code"),
                ),
                (
                    "extension_picture",
                    models.CharField(
                        default="NULL", max_length=20, verbose_name="Picture Extension"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="School",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, verbose_name="School Name")),
                (
                    "description",
                    models.TextField(null=True, verbose_name="School Description"),
                ),
                ("city", models.CharField(max_length=75, verbose_name="City")),
                ("street", models.CharField(max_length=75, verbose_name="Street")),
                ("zip_code", models.CharField(max_length=75, verbose_name="Zip Code")),
                (
                    "extension_picture",
                    models.CharField(
                        default="NULL", max_length=20, verbose_name="Picture Extension"
                    ),
                ),
                ("create_at", models.DateTimeField(auto_now_add=True)),
                ("update_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("birthday", models.DateField(null=True, verbose_name="Birthday")),
                (
                    "linkedin_url",
                    models.URLField(null=True, verbose_name="LinkedIn URL"),
                ),
                (
                    "cv_path",
                    models.CharField(max_length=255, null=True, verbose_name="CV Path"),
                ),
                (
                    "description",
                    models.TextField(null=True, verbose_name="Description"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        max_length=75,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Email",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=75, verbose_name="First Name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=75, verbose_name="Last Name"),
                ),
                (
                    "extension_picture",
                    models.CharField(
                        default="NULL", max_length=20, verbose_name="Picture Extension"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
        ),
    ]
